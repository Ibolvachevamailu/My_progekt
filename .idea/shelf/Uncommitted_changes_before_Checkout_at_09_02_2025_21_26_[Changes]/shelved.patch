Index: turtle.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/turtle.py b/turtle.py
new file mode 100644
--- /dev/null	(date 1739125512716)
+++ b/turtle.py	(date 1739125512716)
@@ -0,0 +1,16 @@
+#Start code here
+from turtle import
+turtle = Turtle()
+screen = Screen()
+turtle.penup()
+turtle.goto(-100, -20)
+turtle.pendown()
+turtle.setheading(270) # your own code
+turtle.color("red")
+turtle.circle(100, 180)
+turtle.color("blue")
+turtle.circle(200, 45)
+turtle.color("green")
+turtle.circle(100*0.586, 90)
+turtle.color("blue")
+turtle.circle(200, 45)
Index: ДЗ алгоритм сжатия (упр-е потоком).py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Написать упрощенную версию алгоритма сжатия RLE. Алгоритм RLE объединяет подряд идущие одинаковые символы, представляя их как количество повторений и сам символ.\r\n#\r\n# Пример:\r\n#\r\n# aaabbbbccccc → 3a4b5cНаписать упрощенную версию алгоритма сжатия RLE. Алгоритм RLE объединяет подряд\r\n\r\nstring_1 = input('введите строку ')\r\ncount = 1\r\nresult = []\r\n\r\n\r\nfor i in range(1, len(string_1)):\r\n    if string_1[i] == string_1[i - 1]:\r\n        count += 1\r\n    else:\r\n        result.append(f'{count}{string_1[i - 1]}')\r\n        count = 1\r\nresult.append(f'{count}{string_1[-1]}')\r\nprint(''.join(result))\r\n\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ДЗ алгоритм сжатия (упр-е потоком).py b/ДЗ алгоритм сжатия (упр-е потоком).py
--- a/ДЗ алгоритм сжатия (упр-е потоком).py	(revision 35392a45e4091883574e08019f6ac003591344ae)
+++ b/ДЗ алгоритм сжатия (упр-е потоком).py	(date 1739125512747)
@@ -1,8 +1,5 @@
-# Написать упрощенную версию алгоритма сжатия RLE. Алгоритм RLE объединяет подряд идущие одинаковые символы, представляя их как количество повторений и сам символ.
-#
-# Пример:
-#
-# aaabbbbccccc → 3a4b5cНаписать упрощенную версию алгоритма сжатия RLE. Алгоритм RLE объединяет подряд
+
+
 
 string_1 = input('введите строку ')
 count = 1
Index: ДЗ простое число.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ДЗ простое число.py b/ДЗ простое число.py
new file mode 100644
--- /dev/null	(date 1739125512731)
+++ b/ДЗ простое число.py	(date 1739125512731)
@@ -0,0 +1,18 @@
+def func(x):
+    x = int(x)
+    if x == 1 or x == 0:
+        print(False)
+        return False
+    else:
+        y = x ** 0.5
+        for i in range(2, (int(y)+1)):
+            if x % i == 0:
+                print(False)
+                return False
+        print(True)
+        return True
+
+
+func('17')
+func('20')
+func('23')
\ No newline at end of file
Index: ДЗ_кинотерат.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ДЗ_кинотерат.py b/ДЗ_кинотерат.py
new file mode 100644
--- /dev/null	(date 1739125512766)
+++ b/ДЗ_кинотерат.py	(date 1739125512766)
@@ -0,0 +1,31 @@
+tickets_count = int(input('введите кол-во билетов '))
+sinemaplan = [[0, 1, 0, 1], [1, 1, 1, 0], [0, 1, 0, 0], [1, 0, 0, 0], [1, 1, 0, 1], [1, 0, 0, 1]]
+row = False
+if tickets_count == 1:
+    for item in sinemaplan:
+        for r in item:
+            if r == 0:
+                row = sinemaplan.index(item)
+                break
+else:
+    count = 0
+count = 0
+next_element = 0
+for item in sinemaplan:
+    for r in item:
+        next_element += 1
+        if r == 0 and item[r + 1] == 0:
+            count += 1
+            if count == tickets_count:
+                row = sinemaplan.index(item)  # выводит номер ряда
+                break
+        else:
+            count = 0
+
+    if row is not False:  # Если ряд найден, выходим из цикла по рядам
+        break
+if row is False:
+    print(False)  # Подходящих мест нет
+else:
+    print(row)
+
Index: ДЗ валидность даты.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ДЗ валидность даты.py b/ДЗ валидность даты.py
new file mode 100644
--- /dev/null	(date 1739125512781)
+++ b/ДЗ валидность даты.py	(date 1739125512781)
@@ -0,0 +1,17 @@
+from datetime import datetime
+
+def valid_data(data_str, data_format='%d.%m.%Y'):
+    try:
+        datetime.strptime(data_str, data_format)
+        return True
+    except ValueError:
+        return False
+
+print(valid_data('29.02.2000'))
+print(valid_data('29.02.2001'))
+print(valid_data('29.02.2025'))
+print(valid_data('29.02.2026'))
+# 29.02.2000 -> True
+# 29.02.2001 -> False
+# 29.02.2001  -> False
+
Index: lessons.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lessons.py b/lessons.py
new file mode 100644
--- /dev/null	(date 1739125512799)
+++ b/lessons.py	(date 1739125512799)
@@ -0,0 +1,5 @@
+import numpy as np
+
+# Создание массива от 0 до 9
+arr = np.arange(0.5, 5, 0.5)
+print(arr)
