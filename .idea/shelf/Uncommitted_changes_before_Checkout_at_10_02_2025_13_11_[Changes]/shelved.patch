Index: ДЗ пешком до Мордора.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import lessons as np\r\n\r\ndef cal_euclidean(a: int, b: int):\r\n    i = 10\r\n    a = int(a)\r\n    b = int(b)\r\n    for i in range(a, b):\r\n        distance = ((a - b) ** 2) ** 0.5\r\n        i += 10\r\n    return distance\r\n\r\n# def cal_manhattan(a, b):\r\n#     ## Your code here\r\n#     return distance\r\n#\r\n# def cal_cosine(a, b):\r\n#     ## Your code here\r\n#     return distance\r\na = np.random.randint(-10, 10, size=10)\r\nb = np.random.randint(-10, 10, size=10)\r\nprint(cal_euclidean(a, b))\r\n# print(cal_manhattan(a, b))\r\n# print(cal_cosine(a, b))
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ДЗ пешком до Мордора.py b/ДЗ пешком до Мордора.py
--- a/ДЗ пешком до Мордора.py	(revision 35392a45e4091883574e08019f6ac003591344ae)
+++ b/ДЗ пешком до Мордора.py	(date 1739128910183)
@@ -1,23 +1,36 @@
-import lessons as np
+import numpy as np
 
-def cal_euclidean(a: int, b: int):
-    i = 10
-    a = int(a)
-    b = int(b)
-    for i in range(a, b):
-        distance = ((a - b) ** 2) ** 0.5
-        i += 10
+def cal_euclidean(a: np.ndarray, b: np.ndarray):
+    distance = np.sqrt(np.sum((a - b) ** 2))
+    return distance
+
+def cal_manhattan(a: np.ndarray, b: np.ndarray):
+    distance = np.sum(np.abs(a - b))
     return distance
 
-# def cal_manhattan(a, b):
-#     ## Your code here
-#     return distance
-#
-# def cal_cosine(a, b):
-#     ## Your code here
-#     return distance
+def cal_cosine(a: np.ndarray, b: np.ndarray):
+    # Вычисляем скалярное произведение
+    dot_product = np.dot(a, b)
+
+    # Вычисляем нормы
+    norm_a = np.linalg.norm(a)
+    norm_b = np.linalg.norm(b)
+
+    # Вычисляем косинусное расстояние
+    if norm_a == 0 or norm_b == 0:
+        raise ValueError("Векторы не должны быть нулевыми.")
+
+    cosine_similarity = dot_product / (norm_a * norm_b)
+    distance = 1 - cosine_similarity
+    return distance
+
 a = np.random.randint(-10, 10, size=10)
 b = np.random.randint(-10, 10, size=10)
-print(cal_euclidean(a, b))
+# print(cal_euclidean(a, b))
 # print(cal_manhattan(a, b))
-# print(cal_cosine(a, b))
\ No newline at end of file
+print(cal_cosine(a, b))
+print(a)
+print(b)
+
+
+
Index: lessons.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lessons.py b/lessons.py
new file mode 100644
--- /dev/null	(date 1739125620284)
+++ b/lessons.py	(date 1739125620284)
@@ -0,0 +1,5 @@
+import numpy as np
+
+# Создание массива от 0 до 9
+arr = np.arange(0.5, 5, 0.5)
+print(arr)
Index: ДЗ алгоритм сжатия (упр-е потоком).py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Написать упрощенную версию алгоритма сжатия RLE. Алгоритм RLE объединяет подряд идущие одинаковые символы, представляя их как количество повторений и сам символ.\r\n#\r\n# Пример:\r\n#\r\n# aaabbbbccccc → 3a4b5cНаписать упрощенную версию алгоритма сжатия RLE. Алгоритм RLE объединяет подряд\r\n\r\nstring_1 = input('введите строку ')\r\ncount = 1\r\nresult = []\r\n\r\n\r\nfor i in range(1, len(string_1)):\r\n    if string_1[i] == string_1[i - 1]:\r\n        count += 1\r\n    else:\r\n        result.append(f'{count}{string_1[i - 1]}')\r\n        count = 1\r\nresult.append(f'{count}{string_1[-1]}')\r\nprint(''.join(result))\r\n\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ДЗ алгоритм сжатия (упр-е потоком).py b/ДЗ алгоритм сжатия (упр-е потоком).py
--- a/ДЗ алгоритм сжатия (упр-е потоком).py	(revision 35392a45e4091883574e08019f6ac003591344ae)
+++ b/ДЗ алгоритм сжатия (упр-е потоком).py	(date 1739125620155)
@@ -1,8 +1,5 @@
-# Написать упрощенную версию алгоритма сжатия RLE. Алгоритм RLE объединяет подряд идущие одинаковые символы, представляя их как количество повторений и сам символ.
-#
-# Пример:
-#
-# aaabbbbccccc → 3a4b5cНаписать упрощенную версию алгоритма сжатия RLE. Алгоритм RLE объединяет подряд
+
+
 
 string_1 = input('введите строку ')
 count = 1
Index: turtle.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/turtle.py b/turtle.py
new file mode 100644
--- /dev/null	(date 1739125620142)
+++ b/turtle.py	(date 1739125620142)
@@ -0,0 +1,16 @@
+#Start code here
+from turtle import
+turtle = Turtle()
+screen = Screen()
+turtle.penup()
+turtle.goto(-100, -20)
+turtle.pendown()
+turtle.setheading(270) # your own code
+turtle.color("red")
+turtle.circle(100, 180)
+turtle.color("blue")
+turtle.circle(200, 45)
+turtle.color("green")
+turtle.circle(100*0.586, 90)
+turtle.color("blue")
+turtle.circle(200, 45)
Index: ДЗ простое число.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ДЗ простое число.py b/ДЗ простое число.py
new file mode 100644
--- /dev/null	(date 1739125620170)
+++ b/ДЗ простое число.py	(date 1739125620170)
@@ -0,0 +1,18 @@
+def func(x):
+    x = int(x)
+    if x == 1 or x == 0:
+        print(False)
+        return False
+    else:
+        y = x ** 0.5
+        for i in range(2, (int(y)+1)):
+            if x % i == 0:
+                print(False)
+                return False
+        print(True)
+        return True
+
+
+func('17')
+func('20')
+func('23')
\ No newline at end of file
Index: ДЗ формула герона хоббиты.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ДЗ формула герона хоббиты.py b/ДЗ формула герона хоббиты.py
new file mode 100644
--- /dev/null	(date 1739129036215)
+++ b/ДЗ формула герона хоббиты.py	(date 1739129036215)
@@ -0,0 +1,5 @@
+def amulet_area(a, b, c):
+    # your code here
+    return S
+
+assert amulet_area(3, 4, 5) == 6
\ No newline at end of file
Index: ДЗ_кинотерат.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ДЗ_кинотерат.py b/ДЗ_кинотерат.py
new file mode 100644
--- /dev/null	(date 1739125620181)
+++ b/ДЗ_кинотерат.py	(date 1739125620181)
@@ -0,0 +1,31 @@
+tickets_count = int(input('введите кол-во билетов '))
+sinemaplan = [[0, 1, 0, 1], [1, 1, 1, 0], [0, 1, 0, 0], [1, 0, 0, 0], [1, 1, 0, 1], [1, 0, 0, 1]]
+row = False
+if tickets_count == 1:
+    for item in sinemaplan:
+        for r in item:
+            if r == 0:
+                row = sinemaplan.index(item)
+                break
+else:
+    count = 0
+count = 0
+next_element = 0
+for item in sinemaplan:
+    for r in item:
+        next_element += 1
+        if r == 0 and item[r + 1] == 0:
+            count += 1
+            if count == tickets_count:
+                row = sinemaplan.index(item)  # выводит номер ряда
+                break
+        else:
+            count = 0
+
+    if row is not False:  # Если ряд найден, выходим из цикла по рядам
+        break
+if row is False:
+    print(False)  # Подходящих мест нет
+else:
+    print(row)
+
Index: ДЗ валидность даты.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ДЗ валидность даты.py b/ДЗ валидность даты.py
new file mode 100644
--- /dev/null	(date 1739125620195)
+++ b/ДЗ валидность даты.py	(date 1739125620195)
@@ -0,0 +1,17 @@
+from datetime import datetime
+
+def valid_data(data_str, data_format='%d.%m.%Y'):
+    try:
+        datetime.strptime(data_str, data_format)
+        return True
+    except ValueError:
+        return False
+
+print(valid_data('29.02.2000'))
+print(valid_data('29.02.2001'))
+print(valid_data('29.02.2025'))
+print(valid_data('29.02.2026'))
+# 29.02.2000 -> True
+# 29.02.2001 -> False
+# 29.02.2001  -> False
+
